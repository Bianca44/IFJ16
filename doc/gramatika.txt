<class-list> -> class <ID> { <class-element> } <class-list>
<class-element> -> static <declaration-element> <class-element>
<declaration-element> -> <param> <declaration>
<declaration-element> -> void id <method-declaration>
<declaration> -> epsilon;
<declaration> -> = <E>;
<declaration> -> <method-declaration>
<method-declaration> -> ( <param-list> ) { <method-element> }
<ID> -> id
<ID> -> special_id
<data-type> -> int
<data-type> -> double
<data-type> -> String
<data-type> -> boolean
<param-list> -> epsilon
<param-list> -> <param> <next-param>
<next-param> -> ,<param> <next-param>
<next-param> -> epsilon
<param> -> <data-type> id
<call-assign> -> (<param-value>)
<call-assign> -> = <E>
<param-value> -> epsilon
<param-value> -> <E> <next-param-value>
<next-param-value> -> ,<E> <next-param-value>
<next-param-value> -> epsilon
<value> -> epsilon
<value> -> = <E>
<method-element> -> <data-type> id <value>; <method-element>
<method-element> -> epsilon
<method-element> -> ; <method-element>
<method-element> -> <statement-list> <method-element>
<statement-list> -> <statement> <statement-list>
<statement-list> -> epsilon
<statement> -> ;
<statement> -> <ID> <call-assign>;
<statement> -> if (<E>) <condition-list> <else>
<statement> -> while (<E>) <condition-list>
<statement> -> return <return-value>;
<return-value> -> epsilon
<return-value> -> <E>
<else> -> epsilon
<else> -> else <condition-list>
<statement-list> -> {<statement-list>} <statement-list>
<condition-list> -> {<statement-list>}
<condition-list> -> <statement>
